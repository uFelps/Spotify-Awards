create table score_album (score_value float(53), album_id bigint not null, user_id bigint not null, primary key (album_id, user_id));
create table score_artist (score_value float(53), user_id bigint not null, artist_id bigint not null, primary key (artist_id, user_id));
create table score_song (score float(53), song_id bigint not null, user_id bigint not null, primary key (song_id, user_id));
create table tb_album (id bigserial not null, artist varchar(255), average float(53), count_votes integer, duration varchar(255), img varchar(255), name varchar(255), released timestamp(6) with time zone, songs varchar(255) array, url varchar(255), primary key (id));
create table tb_artist (id bigserial not null, average float(53), count_votes integer, image varchar(255), listeners varchar(255), name varchar(255), primary key (id));
create table tb_song (id bigserial not null, artist varchar(255), average float(53), category varchar(255), count_votes integer, duration varchar(255), img varchar(255), indicated_best_category boolean, indicated_best_song boolean, title varchar(255), url varchar(255), primary key (id));
create table tb_user (id bigserial not null, email varchar(255), primary key (id));
alter table if exists score_album add constraint FK6vdehshol07x8f800r98n9cff foreign key (album_id) references tb_album;
alter table if exists score_album add constraint FK9ogd65d4l1uob09djrqgq198k foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKedyydla7x50ijr4y6e55uo4kh foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKae38ehq2i6o5uqpvck5k64sfm foreign key (artist_id) references tb_artist;
alter table if exists score_song add constraint FKbnbsdydbrm69jx0ubk8cmkmdo foreign key (song_id) references tb_song;
alter table if exists score_song add constraint FKgv2doog9yx5oer4520uo9dtfh foreign key (user_id) references tb_user;
create table score_album (score_value float(53), album_id bigint not null, user_id bigint not null, primary key (album_id, user_id));
create table score_artist (score_value float(53), user_id bigint not null, artist_id bigint not null, primary key (artist_id, user_id));
create table score_song (score float(53), song_id bigint not null, user_id bigint not null, primary key (song_id, user_id));
create table tb_album (id bigserial not null, artist varchar(255), average float(53), count_votes integer, duration varchar(255), img varchar(255), name varchar(255), released timestamp(6) with time zone, songs varchar(255) array, url varchar(255), primary key (id));
create table tb_artist (id bigserial not null, average float(53), count_votes integer, image varchar(255), listeners varchar(255), name varchar(255), primary key (id));
create table tb_song (id bigserial not null, artist varchar(255), average float(53), category varchar(255), count_votes integer, duration varchar(255), img varchar(255), indicated_best_category boolean, indicated_best_song boolean, title varchar(255), url varchar(255), primary key (id));
create table tb_user (id bigserial not null, email varchar(255), primary key (id));
alter table if exists score_album add constraint FK6vdehshol07x8f800r98n9cff foreign key (album_id) references tb_album;
alter table if exists score_album add constraint FK9ogd65d4l1uob09djrqgq198k foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKedyydla7x50ijr4y6e55uo4kh foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKae38ehq2i6o5uqpvck5k64sfm foreign key (artist_id) references tb_artist;
alter table if exists score_song add constraint FKbnbsdydbrm69jx0ubk8cmkmdo foreign key (song_id) references tb_song;
alter table if exists score_song add constraint FKgv2doog9yx5oer4520uo9dtfh foreign key (user_id) references tb_user;
create table score_album (score_value float(53), album_id bigint not null, user_id bigint not null, primary key (album_id, user_id));
create table score_artist (score_value float(53), user_id bigint not null, artist_id bigint not null, primary key (artist_id, user_id));
create table score_song (score float(53), song_id bigint not null, user_id bigint not null, primary key (song_id, user_id));
create table tb_album (id bigserial not null, artist varchar(255), average float(53), count_votes integer, duration varchar(255), img varchar(255), name varchar(255), released timestamp(6) with time zone, songs varchar(255) array, url varchar(255), primary key (id));
create table tb_artist (id bigserial not null, average float(53), count_votes integer, image varchar(255), listeners varchar(255), name varchar(255), primary key (id));
create table tb_song (id bigserial not null, artist varchar(255), average float(53), category varchar(255), count_votes integer, duration varchar(255), img varchar(255), indicated_best_category boolean, indicated_best_song boolean, title varchar(255), url varchar(255), primary key (id));
create table tb_user (id bigserial not null, email varchar(255), primary key (id));
alter table if exists score_album add constraint FK6vdehshol07x8f800r98n9cff foreign key (album_id) references tb_album;
alter table if exists score_album add constraint FK9ogd65d4l1uob09djrqgq198k foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKedyydla7x50ijr4y6e55uo4kh foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKae38ehq2i6o5uqpvck5k64sfm foreign key (artist_id) references tb_artist;
alter table if exists score_song add constraint FKbnbsdydbrm69jx0ubk8cmkmdo foreign key (song_id) references tb_song;
alter table if exists score_song add constraint FKgv2doog9yx5oer4520uo9dtfh foreign key (user_id) references tb_user;
create table score_album (score_value float(53), album_id bigint not null, user_id bigint not null, primary key (album_id, user_id));
create table score_artist (score_value float(53), user_id bigint not null, artist_id bigint not null, primary key (artist_id, user_id));
create table score_song (score float(53), song_id bigint not null, user_id bigint not null, primary key (song_id, user_id));
create table tb_album (id bigserial not null, artist varchar(255), average float(53), count_votes integer, duration varchar(255), img varchar(255), name varchar(255), released timestamp(6) with time zone, songs varchar(255) array, url varchar(255), primary key (id));
create table tb_artist (id bigserial not null, average float(53), count_votes integer, image varchar(255), listeners varchar(255), name varchar(255), primary key (id));
create table tb_song (id bigserial not null, artist varchar(255), average float(53), category varchar(255), count_votes integer, duration varchar(255), img varchar(255), indicated_best_category boolean, indicated_best_song boolean, title varchar(255), url varchar(255), primary key (id));
create table tb_user (id bigserial not null, email varchar(255), primary key (id));
alter table if exists score_album add constraint FK6vdehshol07x8f800r98n9cff foreign key (album_id) references tb_album;
alter table if exists score_album add constraint FK9ogd65d4l1uob09djrqgq198k foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKedyydla7x50ijr4y6e55uo4kh foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKae38ehq2i6o5uqpvck5k64sfm foreign key (artist_id) references tb_artist;
alter table if exists score_song add constraint FKbnbsdydbrm69jx0ubk8cmkmdo foreign key (song_id) references tb_song;
alter table if exists score_song add constraint FKgv2doog9yx5oer4520uo9dtfh foreign key (user_id) references tb_user;
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/harry.jpeg.png?raw=true' , '63.961.408', 'Harry Styles');
create table score_album (score_value float(53), album_id bigint not null, user_id bigint not null, primary key (album_id, user_id));
create table score_artist (score_value float(53), user_id bigint not null, artist_id bigint not null, primary key (artist_id, user_id));
create table score_song (score float(53), song_id bigint not null, user_id bigint not null, primary key (song_id, user_id));
create table tb_album (id bigserial not null, artist varchar(255), average float(53), count_votes integer, duration varchar(255), img varchar(255), name varchar(255), released timestamp(6) with time zone, songs varchar(255) array, url varchar(255), primary key (id));
create table tb_artist (id bigserial not null, average float(53), count_votes integer, image varchar(255), listeners varchar(255), name varchar(255), primary key (id));
create table tb_song (id bigserial not null, artist varchar(255), average float(53), category varchar(255), count_votes integer, duration varchar(255), img varchar(255), indicated_best_category boolean, indicated_best_song boolean, title varchar(255), url varchar(255), primary key (id));
create table tb_user (id bigserial not null, email varchar(255), primary key (id));
alter table if exists score_album add constraint FK6vdehshol07x8f800r98n9cff foreign key (album_id) references tb_album;
alter table if exists score_album add constraint FK9ogd65d4l1uob09djrqgq198k foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKedyydla7x50ijr4y6e55uo4kh foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKae38ehq2i6o5uqpvck5k64sfm foreign key (artist_id) references tb_artist;
alter table if exists score_song add constraint FKbnbsdydbrm69jx0ubk8cmkmdo foreign key (song_id) references tb_song;
alter table if exists score_song add constraint FKgv2doog9yx5oer4520uo9dtfh foreign key (user_id) references tb_user;
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/harry.jpeg.png?raw=true' , '63.961.408', 'Harry Styles');
create table score_album (score_value float(53), album_id bigint not null, user_id bigint not null, primary key (album_id, user_id));
create table score_artist (score_value float(53), user_id bigint not null, artist_id bigint not null, primary key (artist_id, user_id));
create table score_song (score float(53), song_id bigint not null, user_id bigint not null, primary key (song_id, user_id));
create table tb_album (id bigserial not null, artist varchar(255), average float(53), count_votes integer, duration varchar(255), img varchar(255), name varchar(255), released timestamp(6) with time zone, songs varchar(255) array, url varchar(255), primary key (id));
create table tb_artist (id bigserial not null, average float(53), count_votes integer, image varchar(255), listeners varchar(255), name varchar(255), primary key (id));
create table tb_song (id bigserial not null, artist varchar(255), average float(53), category varchar(255), count_votes integer, duration varchar(255), img varchar(255), indicated_best_category boolean, indicated_best_song boolean, title varchar(255), url varchar(255), primary key (id));
create table tb_user (id bigserial not null, email varchar(255), primary key (id));
alter table if exists score_album add constraint FK6vdehshol07x8f800r98n9cff foreign key (album_id) references tb_album;
alter table if exists score_album add constraint FK9ogd65d4l1uob09djrqgq198k foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKedyydla7x50ijr4y6e55uo4kh foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKae38ehq2i6o5uqpvck5k64sfm foreign key (artist_id) references tb_artist;
alter table if exists score_song add constraint FKbnbsdydbrm69jx0ubk8cmkmdo foreign key (song_id) references tb_song;
alter table if exists score_song add constraint FKgv2doog9yx5oer4520uo9dtfh foreign key (user_id) references tb_user;
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/harry.jpeg.png?raw=true' , '63.961.408', 'Harry Styles');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/kendrick-lamar.jpg.png?raw=true' , '37.552.617', 'Kendrick Lamar');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/post-malone.jpg.png?raw=true' , '50.243.221', 'Post Malone');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/doja-cat.jpeg.png?raw=true' , '50.332.358', 'Doja Cat');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/billie.jpg.png?raw=true' , '50.361.697', 'Billie Eilish');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/taylor-swif.jpg.png?raw=true' , '83.546.017', 'Taylor Swift');
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('As it Was', 'Harry Styles', '2:37', 'Pop', true, false, 'https://open.spotify.com/track/4LRPiXqCikLlN15c3yImP7?si=8405e2769bfa4d9a', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/As-It-Was.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Anti-Hero', 'Taylor Swift', '3:20', 'Pop', true, false, 'https://open.spotify.com/track/0V3wPSX9ygBnCm8psDIegu?si=a215a95cb3404e20', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/anti-hero.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('N95', 'Kendrick Lamar', '3:52', 'Hip-Hop', true, false, 'https://open.spotify.com/track/0fX4oNGBWO3dSGUZcVdVV2?si=015798ae3c7e4dc3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/n95.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('I Like You', 'Post Malone, Doja Cat', '3:52', 'Pop', true, false, 'https://open.spotify.com/track/0O6u0VJ46W86TxN9wgyqDj?si=cbf08479c29e488a', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/I-Like-You.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Black Summer', 'Red Hot Chili Peppers', '3:52', 'Rock', true, false, 'https://open.spotify.com/track/3a94TbZOxhkI9xuNwYL53b?si=0d58ac9f99164ce3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/black-summer.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Miss You', 'Oliver Tree', '3:26', 'Pop', true, false, 'https://open.spotify.com/track/73vIOb4Q7YN6HeJTbscRx5?si=7c58689be9c14ecf', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/missyou.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES(;
Song unroly = new Song(null, 'Unholy', 'Sam Smith, Kim Petras', '2:36', 'Pop', false, true, 'https://open.spotify.com/track/3nqQXoyQOWXiESFLlDF1hG?si=023b3f1087dc441c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/unholy.jpg.png?raw=true', 0.0, 0);
Song breakMySoul = new Song(null, 'Break My Soul', 'Beyoncé', '4:38', 'Pop', false, true, 'https://open.spotify.com/track/2KukL7UlQ8TdvpaA7bY3ZJ?si=28d00316fcab437c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/breakmysoul.jpeg.png?raw=true', 0.0, 0);
Song late = new Song(null, 'Late Night Talking', 'Harry Styles', '2:57', 'Pop', false, true, 'https://open.spotify.com/track/1qEmFfgcLObUfQm0j1W2CK?si=b9920c0c6ad24468', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/lateNightTalking.png?raw=true', 0.0, 0);
Song lavender = new Song(null, 'Lavender Haze', 'Taylor Swift', '3:22', 'Pop', false, true, 'https://open.spotify.com/track/5jQI2r1RdgtuT8S3iG8zFC?si=b23c047e38f54e14', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/taylor-swif.jpg.png?raw=true', 0.0, 0);
Song dynamite = new Song(null, 'Dynamite', 'BTS', '3:19', 'Pop', false, true, 'https://open.spotify.com/track/1hIuSG6xV4RDgD8bDVKP7N?si=d828241883a94b86', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/dynamite.jpg.png?raw=true', 0.0, 0);
Song butter = new Song(null, 'Butter', 'BTS', '2:44', 'Pop', false, true, 'https://open.spotify.com/track/6jjYDGxVJsWS0a5wlVF5vS?si=707e9852b10b4ba3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/butter.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(dynamite,unroly, breakMySoul, late, lavender,butter));
Song dieHard = new Song(null, 'Die Hard', 'Kendrick Lamar', '3:59', 'Hip-Hop', false, true, 'https://open.spotify.com/track/2g6tReTlM2Akp41g0HaeXN?si=d6cb3d5642ff4236', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/diehard.png?raw=true', 0.0, 0);
Song jimmy = new Song(null, 'Jimmy Cooks', 'Drake, 21 Savage', '3:38', 'Hip-Hop', false, true, 'https://open.spotify.com/track/3F5CgOj3wFlRv51JsHbxhe?si=308b31923d224861', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/jimmy.png?raw=true', 0.0, 0);
Song cooped = new Song(null, 'Cooped Up', 'Post Malone, Roddy Ricch', '3:05', 'Hip-Hop', false, true, 'https://open.spotify.com/track/7DwcBgdzqhFJltEaV1XF81?si=58e6287474444f8b', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/cooppedup.png?raw=true', 0.0, 0);
Song family = new Song(null, 'Family Ties', 'Baby Keem, Kendrick Lamar', '4:12', 'Hip-Hop', false, true, 'https://open.spotify.com/track/7Bpx2vsWfQFBACRz4h3IqH?si=b302e13019334ac9', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/familyties.png?raw=true', 0.0, 0);
Song rich = new Song(null, 'Rich Flex', 'Drake, 21 Savage', '3:59', 'Hip-Hop', false, true, 'https://open.spotify.com/track/1bDbXMyjaUIooNwFE9wn0N?si=5aad3c9693bf4947', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/richflex.png?raw=true', 0.0, 0);
Song island = new Song(null, 'Island of Da Phonk Up', 'psycho7k', '1:49', 'Hip-Hop', false, true, 'https://open.spotify.com/track/2rHlvvsXY72TC8N71XZxkn?si=304e690b02484d6f', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/island.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(island,dieHard, jimmy, cooped, family, rich ));
Song tippa = new Song(null, 'Tippa My Tongue', 'Red Hot Chili Peppers', '4:20', 'Rock', false, true, 'https://open.spotify.com/track/3s53zBEi1ZU6dJj19eFOxW?si=316e19c326004699', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/tippamytoungue.png?raw=true', 0.0, 0);
Song thisIsWay = new Song(null, 'This is Why', 'Paramore', '3:27', 'Rock', false, true, 'https://open.spotify.com/track/7z84Fwf1R3Z2BwHCP620CI?si=460092134e524df7', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thisisway.png?raw=true', 0.0, 0);
Song body = new Song(null, 'Body Paint', 'Arctic Monkeys', '4:50', 'Rock', false, true, 'https://open.spotify.com/track/42GuKw49pPxNAkIhWGwgFs?si=4632d7295b214dfa', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/bodypaint.png?raw=true', 0.0, 0);
Song dying = new Song(null, 'The Dying Song', 'Slipknot', '3:23', 'Rock', false, true, 'https://open.spotify.com/track/6rsoBvxrlxdmqJyGPPciyq?si=9f247f6b390f4d20', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thedyingsong.png?raw=true', 0.0, 0);
Song patient = new Song(null, 'Patient Number 9', 'Ozzy Osbourne, Jeff Beck', '7:21', 'Rock', false, true, 'https://open.spotify.com/track/3YYnFEXCLNbaWuC0hIEnIS?si=01575c29fe6a471c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/ozzy-patient-number-9.png?raw=true', 0.0, 0);
Song these = new Song(null, 'These Are The Ways', 'Red Hot Chili Peppers', '3:56', 'Rock', false, true, 'https://open.spotify.com/track/1KtXgVTeu3GUXHrOAef6QQ?si=8086e17dbf854aa9', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thesearetheways.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(tippa, thisIsWay, body, dying, patient, these));
create table score_album (score_value float(53), album_id bigint not null, user_id bigint not null, primary key (album_id, user_id));
create table score_artist (score_value float(53), user_id bigint not null, artist_id bigint not null, primary key (artist_id, user_id));
create table score_song (score float(53), song_id bigint not null, user_id bigint not null, primary key (song_id, user_id));
create table tb_album (id bigserial not null, artist varchar(255), average float(53), count_votes integer, duration varchar(255), img varchar(255), name varchar(255), released timestamp(6) with time zone, songs varchar(255) array, url varchar(255), primary key (id));
create table tb_artist (id bigserial not null, average float(53), count_votes integer, image varchar(255), listeners varchar(255), name varchar(255), primary key (id));
create table tb_song (id bigserial not null, artist varchar(255), average float(53), category varchar(255), count_votes integer, duration varchar(255), img varchar(255), indicated_best_category boolean, indicated_best_song boolean, title varchar(255), url varchar(255), primary key (id));
create table tb_user (id bigserial not null, email varchar(255), primary key (id));
alter table if exists score_album add constraint FK6vdehshol07x8f800r98n9cff foreign key (album_id) references tb_album;
alter table if exists score_album add constraint FK9ogd65d4l1uob09djrqgq198k foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKedyydla7x50ijr4y6e55uo4kh foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKae38ehq2i6o5uqpvck5k64sfm foreign key (artist_id) references tb_artist;
alter table if exists score_song add constraint FKbnbsdydbrm69jx0ubk8cmkmdo foreign key (song_id) references tb_song;
alter table if exists score_song add constraint FKgv2doog9yx5oer4520uo9dtfh foreign key (user_id) references tb_user;
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/harry.jpeg.png?raw=true' , '63.961.408', 'Harry Styles');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/kendrick-lamar.jpg.png?raw=true' , '37.552.617', 'Kendrick Lamar');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/post-malone.jpg.png?raw=true' , '50.243.221', 'Post Malone');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/doja-cat.jpeg.png?raw=true' , '50.332.358', 'Doja Cat');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/billie.jpg.png?raw=true' , '50.361.697', 'Billie Eilish');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/taylor-swif.jpg.png?raw=true' , '83.546.017', 'Taylor Swift');
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('As is Was', 'Harry Styles', '2:37', 'Pop', true, false, 'https://open.spotify.com/track/4LRPiXqCikLlN15c3yImP7?si=8405e2769bfa4d9a', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/As-It-Was.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Anti-Hero', 'Taylor Swift', '3:20', 'Pop', true, false, 'https://open.spotify.com/track/0V3wPSX9ygBnCm8psDIegu?si=a215a95cb3404e20', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/anti-hero.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('N95', 'Kendrick Lamar', '3:52', 'Hip-Hop', true, false, 'https://open.spotify.com/track/0fX4oNGBWO3dSGUZcVdVV2?si=015798ae3c7e4dc3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/n95.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('I Like You', 'Post Malone, Doja Cat', '3:52', 'Pop', true, false, 'https://open.spotify.com/track/0O6u0VJ46W86TxN9wgyqDj?si=cbf08479c29e488a', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/I-Like-You.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Black Summer', 'Red Hot Chili Peppers', '3:52', 'Rock', true, false, 'https://open.spotify.com/track/3a94TbZOxhkI9xuNwYL53b?si=0d58ac9f99164ce3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/black-summer.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Miss You', 'Oliver Tree', '3:26', 'Pop', true, false, 'https://open.spotify.com/track/73vIOb4Q7YN6HeJTbscRx5?si=7c58689be9c14ecf', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/missyou.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES(;
Song unroly = new Song(null, 'Unholy', 'Sam Smith, Kim Petras', '2:36', 'Pop', false, true, 'https://open.spotify.com/track/3nqQXoyQOWXiESFLlDF1hG?si=023b3f1087dc441c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/unholy.jpg.png?raw=true', 0.0, 0);
Song breakMySoul = new Song(null, 'Break My Soul', 'Beyoncé', '4:38', 'Pop', false, true, 'https://open.spotify.com/track/2KukL7UlQ8TdvpaA7bY3ZJ?si=28d00316fcab437c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/breakmysoul.jpeg.png?raw=true', 0.0, 0);
Song late = new Song(null, 'Late Night Talking', 'Harry Styles', '2:57', 'Pop', false, true, 'https://open.spotify.com/track/1qEmFfgcLObUfQm0j1W2CK?si=b9920c0c6ad24468', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/lateNightTalking.png?raw=true', 0.0, 0);
Song lavender = new Song(null, 'Lavender Haze', 'Taylor Swift', '3:22', 'Pop', false, true, 'https://open.spotify.com/track/5jQI2r1RdgtuT8S3iG8zFC?si=b23c047e38f54e14', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/taylor-swif.jpg.png?raw=true', 0.0, 0);
Song dynamite = new Song(null, 'Dynamite', 'BTS', '3:19', 'Pop', false, true, 'https://open.spotify.com/track/1hIuSG6xV4RDgD8bDVKP7N?si=d828241883a94b86', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/dynamite.jpg.png?raw=true', 0.0, 0);
Song butter = new Song(null, 'Butter', 'BTS', '2:44', 'Pop', false, true, 'https://open.spotify.com/track/6jjYDGxVJsWS0a5wlVF5vS?si=707e9852b10b4ba3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/butter.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(dynamite,unroly, breakMySoul, late, lavender,butter));
Song dieHard = new Song(null, 'Die Hard', 'Kendrick Lamar', '3:59', 'Hip-Hop', false, true, 'https://open.spotify.com/track/2g6tReTlM2Akp41g0HaeXN?si=d6cb3d5642ff4236', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/diehard.png?raw=true', 0.0, 0);
Song jimmy = new Song(null, 'Jimmy Cooks', 'Drake, 21 Savage', '3:38', 'Hip-Hop', false, true, 'https://open.spotify.com/track/3F5CgOj3wFlRv51JsHbxhe?si=308b31923d224861', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/jimmy.png?raw=true', 0.0, 0);
Song cooped = new Song(null, 'Cooped Up', 'Post Malone, Roddy Ricch', '3:05', 'Hip-Hop', false, true, 'https://open.spotify.com/track/7DwcBgdzqhFJltEaV1XF81?si=58e6287474444f8b', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/cooppedup.png?raw=true', 0.0, 0);
Song family = new Song(null, 'Family Ties', 'Baby Keem, Kendrick Lamar', '4:12', 'Hip-Hop', false, true, 'https://open.spotify.com/track/7Bpx2vsWfQFBACRz4h3IqH?si=b302e13019334ac9', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/familyties.png?raw=true', 0.0, 0);
Song rich = new Song(null, 'Rich Flex', 'Drake, 21 Savage', '3:59', 'Hip-Hop', false, true, 'https://open.spotify.com/track/1bDbXMyjaUIooNwFE9wn0N?si=5aad3c9693bf4947', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/richflex.png?raw=true', 0.0, 0);
Song island = new Song(null, 'Island of Da Phonk Up', 'psycho7k', '1:49', 'Hip-Hop', false, true, 'https://open.spotify.com/track/2rHlvvsXY72TC8N71XZxkn?si=304e690b02484d6f', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/island.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(island,dieHard, jimmy, cooped, family, rich ));
Song tippa = new Song(null, 'Tippa My Tongue', 'Red Hot Chili Peppers', '4:20', 'Rock', false, true, 'https://open.spotify.com/track/3s53zBEi1ZU6dJj19eFOxW?si=316e19c326004699', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/tippamytoungue.png?raw=true', 0.0, 0);
Song thisIsWay = new Song(null, 'This is Why', 'Paramore', '3:27', 'Rock', false, true, 'https://open.spotify.com/track/7z84Fwf1R3Z2BwHCP620CI?si=460092134e524df7', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thisisway.png?raw=true', 0.0, 0);
Song body = new Song(null, 'Body Paint', 'Arctic Monkeys', '4:50', 'Rock', false, true, 'https://open.spotify.com/track/42GuKw49pPxNAkIhWGwgFs?si=4632d7295b214dfa', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/bodypaint.png?raw=true', 0.0, 0);
Song dying = new Song(null, 'The Dying Song', 'Slipknot', '3:23', 'Rock', false, true, 'https://open.spotify.com/track/6rsoBvxrlxdmqJyGPPciyq?si=9f247f6b390f4d20', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thedyingsong.png?raw=true', 0.0, 0);
Song patient = new Song(null, 'Patient Number 9', 'Ozzy Osbourne, Jeff Beck', '7:21', 'Rock', false, true, 'https://open.spotify.com/track/3YYnFEXCLNbaWuC0hIEnIS?si=01575c29fe6a471c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/ozzy-patient-number-9.png?raw=true', 0.0, 0);
Song these = new Song(null, 'These Are The Ways', 'Red Hot Chili Peppers', '3:56', 'Rock', false, true, 'https://open.spotify.com/track/1KtXgVTeu3GUXHrOAef6QQ?si=8086e17dbf854aa9', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thesearetheways.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(tippa, thisIsWay, body, dying, patient, these));
create table score_album (score_value float(53), album_id bigint not null, user_id bigint not null, primary key (album_id, user_id));
create table score_artist (score_value float(53), user_id bigint not null, artist_id bigint not null, primary key (artist_id, user_id));
create table score_song (score float(53), song_id bigint not null, user_id bigint not null, primary key (song_id, user_id));
create table tb_album (id bigserial not null, artist varchar(255), average float(53), count_votes integer, duration varchar(255), img varchar(255), name varchar(255), released timestamp(6) with time zone, songs varchar(255) array, url varchar(255), primary key (id));
create table tb_artist (id bigserial not null, average float(53), count_votes integer, image varchar(255), listeners varchar(255), name varchar(255), primary key (id));
create table tb_song (id bigserial not null, artist varchar(255), average float(53), category varchar(255), count_votes integer, duration varchar(255), img varchar(255), indicated_best_category boolean, indicated_best_song boolean, title varchar(255), url varchar(255), primary key (id));
create table tb_user (id bigserial not null, email varchar(255), primary key (id));
alter table if exists score_album add constraint FK6vdehshol07x8f800r98n9cff foreign key (album_id) references tb_album;
alter table if exists score_album add constraint FK9ogd65d4l1uob09djrqgq198k foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKedyydla7x50ijr4y6e55uo4kh foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKae38ehq2i6o5uqpvck5k64sfm foreign key (artist_id) references tb_artist;
alter table if exists score_song add constraint FKbnbsdydbrm69jx0ubk8cmkmdo foreign key (song_id) references tb_song;
alter table if exists score_song add constraint FKgv2doog9yx5oer4520uo9dtfh foreign key (user_id) references tb_user;
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/harry.jpeg.png?raw=true' , '63.961.408', 'Harry Styles');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/kendrick-lamar.jpg.png?raw=true' , '37.552.617', 'Kendrick Lamar');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/post-malone.jpg.png?raw=true' , '50.243.221', 'Post Malone');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/doja-cat.jpeg.png?raw=true' , '50.332.358', 'Doja Cat');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/billie.jpg.png?raw=true' , '50.361.697', 'Billie Eilish');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/taylor-swif.jpg.png?raw=true' , '83.546.017', 'Taylor Swift');
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('As is Was', 'Harry Styles', '2:37', 'Pop', true, false, 'https://open.spotify.com/track/4LRPiXqCikLlN15c3yImP7?si=8405e2769bfa4d9a', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/As-It-Was.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Anti-Hero', 'Taylor Swift', '3:20', 'Pop', true, false, 'https://open.spotify.com/track/0V3wPSX9ygBnCm8psDIegu?si=a215a95cb3404e20', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/anti-hero.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('N95', 'Kendrick Lamar', '3:52', 'Hip-Hop', true, false, 'https://open.spotify.com/track/0fX4oNGBWO3dSGUZcVdVV2?si=015798ae3c7e4dc3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/n95.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('I Like You', 'Post Malone, Doja Cat', '3:52', 'Pop', true, false, 'https://open.spotify.com/track/0O6u0VJ46W86TxN9wgyqDj?si=cbf08479c29e488a', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/I-Like-You.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Black Summer', 'Red Hot Chili Peppers', '3:52', 'Rock', true, false, 'https://open.spotify.com/track/3a94TbZOxhkI9xuNwYL53b?si=0d58ac9f99164ce3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/black-summer.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Miss You', 'Oliver Tree', '3:26', 'Pop', true, false, 'https://open.spotify.com/track/73vIOb4Q7YN6HeJTbscRx5?si=7c58689be9c14ecf', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/missyou.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES(;
Song unroly = new Song(null, 'Unholy', 'Sam Smith, Kim Petras', '2:36', 'Pop', false, true, 'https://open.spotify.com/track/3nqQXoyQOWXiESFLlDF1hG?si=023b3f1087dc441c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/unholy.jpg.png?raw=true', 0.0, 0);
Song breakMySoul = new Song(null, 'Break My Soul', 'Beyoncé', '4:38', 'Pop', false, true, 'https://open.spotify.com/track/2KukL7UlQ8TdvpaA7bY3ZJ?si=28d00316fcab437c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/breakmysoul.jpeg.png?raw=true', 0.0, 0);
Song late = new Song(null, 'Late Night Talking', 'Harry Styles', '2:57', 'Pop', false, true, 'https://open.spotify.com/track/1qEmFfgcLObUfQm0j1W2CK?si=b9920c0c6ad24468', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/lateNightTalking.png?raw=true', 0.0, 0);
Song lavender = new Song(null, 'Lavender Haze', 'Taylor Swift', '3:22', 'Pop', false, true, 'https://open.spotify.com/track/5jQI2r1RdgtuT8S3iG8zFC?si=b23c047e38f54e14', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/taylor-swif.jpg.png?raw=true', 0.0, 0);
Song dynamite = new Song(null, 'Dynamite', 'BTS', '3:19', 'Pop', false, true, 'https://open.spotify.com/track/1hIuSG6xV4RDgD8bDVKP7N?si=d828241883a94b86', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/dynamite.jpg.png?raw=true', 0.0, 0);
Song butter = new Song(null, 'Butter', 'BTS', '2:44', 'Pop', false, true, 'https://open.spotify.com/track/6jjYDGxVJsWS0a5wlVF5vS?si=707e9852b10b4ba3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/butter.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(dynamite,unroly, breakMySoul, late, lavender,butter));
Song dieHard = new Song(null, 'Die Hard', 'Kendrick Lamar', '3:59', 'Hip-Hop', false, true, 'https://open.spotify.com/track/2g6tReTlM2Akp41g0HaeXN?si=d6cb3d5642ff4236', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/diehard.png?raw=true', 0.0, 0);
Song jimmy = new Song(null, 'Jimmy Cooks', 'Drake, 21 Savage', '3:38', 'Hip-Hop', false, true, 'https://open.spotify.com/track/3F5CgOj3wFlRv51JsHbxhe?si=308b31923d224861', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/jimmy.png?raw=true', 0.0, 0);
Song cooped = new Song(null, 'Cooped Up', 'Post Malone, Roddy Ricch', '3:05', 'Hip-Hop', false, true, 'https://open.spotify.com/track/7DwcBgdzqhFJltEaV1XF81?si=58e6287474444f8b', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/cooppedup.png?raw=true', 0.0, 0);
Song family = new Song(null, 'Family Ties', 'Baby Keem, Kendrick Lamar', '4:12', 'Hip-Hop', false, true, 'https://open.spotify.com/track/7Bpx2vsWfQFBACRz4h3IqH?si=b302e13019334ac9', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/familyties.png?raw=true', 0.0, 0);
Song rich = new Song(null, 'Rich Flex', 'Drake, 21 Savage', '3:59', 'Hip-Hop', false, true, 'https://open.spotify.com/track/1bDbXMyjaUIooNwFE9wn0N?si=5aad3c9693bf4947', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/richflex.png?raw=true', 0.0, 0);
Song island = new Song(null, 'Island of Da Phonk Up', 'psycho7k', '1:49', 'Hip-Hop', false, true, 'https://open.spotify.com/track/2rHlvvsXY72TC8N71XZxkn?si=304e690b02484d6f', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/island.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(island,dieHard, jimmy, cooped, family, rich ));
Song tippa = new Song(null, 'Tippa My Tongue', 'Red Hot Chili Peppers', '4:20', 'Rock', false, true, 'https://open.spotify.com/track/3s53zBEi1ZU6dJj19eFOxW?si=316e19c326004699', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/tippamytoungue.png?raw=true', 0.0, 0);
Song thisIsWay = new Song(null, 'This is Why', 'Paramore', '3:27', 'Rock', false, true, 'https://open.spotify.com/track/7z84Fwf1R3Z2BwHCP620CI?si=460092134e524df7', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thisisway.png?raw=true', 0.0, 0);
Song body = new Song(null, 'Body Paint', 'Arctic Monkeys', '4:50', 'Rock', false, true, 'https://open.spotify.com/track/42GuKw49pPxNAkIhWGwgFs?si=4632d7295b214dfa', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/bodypaint.png?raw=true', 0.0, 0);
Song dying = new Song(null, 'The Dying Song', 'Slipknot', '3:23', 'Rock', false, true, 'https://open.spotify.com/track/6rsoBvxrlxdmqJyGPPciyq?si=9f247f6b390f4d20', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thedyingsong.png?raw=true', 0.0, 0);
Song patient = new Song(null, 'Patient Number 9', 'Ozzy Osbourne, Jeff Beck', '7:21', 'Rock', false, true, 'https://open.spotify.com/track/3YYnFEXCLNbaWuC0hIEnIS?si=01575c29fe6a471c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/ozzy-patient-number-9.png?raw=true', 0.0, 0);
Song these = new Song(null, 'These Are The Ways', 'Red Hot Chili Peppers', '3:56', 'Rock', false, true, 'https://open.spotify.com/track/1KtXgVTeu3GUXHrOAef6QQ?si=8086e17dbf854aa9', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thesearetheways.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(tippa, thisIsWay, body, dying, patient, these));
create table score_album (score_value float(53), album_id bigint not null, user_id bigint not null, primary key (album_id, user_id));
create table score_artist (score_value float(53), user_id bigint not null, artist_id bigint not null, primary key (artist_id, user_id));
create table score_song (score float(53), song_id bigint not null, user_id bigint not null, primary key (song_id, user_id));
create table tb_album (id bigserial not null, artist varchar(255), average float(53), count_votes integer, duration varchar(255), img varchar(255), name varchar(255), released timestamp(6) with time zone, songs varchar(255) array, url varchar(255), primary key (id));
create table tb_artist (id bigserial not null, average float(53), count_votes integer, image varchar(255), listeners varchar(255), name varchar(255), primary key (id));
create table tb_song (id bigserial not null, artist varchar(255), average float(53), category varchar(255), count_votes integer, duration varchar(255), img varchar(255), indicated_best_category boolean, indicated_best_song boolean, title varchar(255), url varchar(255), primary key (id));
create table tb_user (id bigserial not null, email varchar(255), primary key (id));
alter table if exists score_album add constraint FK6vdehshol07x8f800r98n9cff foreign key (album_id) references tb_album;
alter table if exists score_album add constraint FK9ogd65d4l1uob09djrqgq198k foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKedyydla7x50ijr4y6e55uo4kh foreign key (user_id) references tb_user;
alter table if exists score_artist add constraint FKae38ehq2i6o5uqpvck5k64sfm foreign key (artist_id) references tb_artist;
alter table if exists score_song add constraint FKbnbsdydbrm69jx0ubk8cmkmdo foreign key (song_id) references tb_song;
alter table if exists score_song add constraint FKgv2doog9yx5oer4520uo9dtfh foreign key (user_id) references tb_user;
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/harry.jpeg.png?raw=true' , '63.961.408', 'Harry Styles');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/kendrick-lamar.jpg.png?raw=true' , '37.552.617', 'Kendrick Lamar');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/post-malone.jpg.png?raw=true' , '50.243.221', 'Post Malone');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/doja-cat.jpeg.png?raw=true' , '50.332.358', 'Doja Cat');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/billie.jpg.png?raw=true' , '50.361.697', 'Billie Eilish');
INSERT INTO tb_artist (average, count_votes, image, listeners, name) VALUES(0, 0, 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/taylor-swif.jpg.png?raw=true' , '83.546.017', 'Taylor Swift');
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('As is Was', 'Harry Styles', '2:37', 'Pop', true, false, 'https://open.spotify.com/track/4LRPiXqCikLlN15c3yImP7?si=8405e2769bfa4d9a', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/As-It-Was.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Anti-Hero', 'Taylor Swift', '3:20', 'Pop', true, false, 'https://open.spotify.com/track/0V3wPSX9ygBnCm8psDIegu?si=a215a95cb3404e20', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/anti-hero.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('N95', 'Kendrick Lamar', '3:52', 'Hip-Hop', true, false, 'https://open.spotify.com/track/0fX4oNGBWO3dSGUZcVdVV2?si=015798ae3c7e4dc3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/n95.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('I Like You', 'Post Malone, Doja Cat', '3:52', 'Pop', true, false, 'https://open.spotify.com/track/0O6u0VJ46W86TxN9wgyqDj?si=cbf08479c29e488a', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/I-Like-You.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Black Summer', 'Red Hot Chili Peppers', '3:52', 'Rock', true, false, 'https://open.spotify.com/track/3a94TbZOxhkI9xuNwYL53b?si=0d58ac9f99164ce3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/black-summer.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES('Miss You', 'Oliver Tree', '3:26', 'Pop', true, false, 'https://open.spotify.com/track/73vIOb4Q7YN6HeJTbscRx5?si=7c58689be9c14ecf', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/songs-of-the-year/missyou.jpg.png?raw=true', 0.0, 0);
INSERT INTO tb_song(title, artist, duration, category, indicated_best_song, indicated_best_category, url, img, average, count_votes);
VALUES(;
Song unroly = new Song(null, 'Unholy', 'Sam Smith, Kim Petras', '2:36', 'Pop', false, true, 'https://open.spotify.com/track/3nqQXoyQOWXiESFLlDF1hG?si=023b3f1087dc441c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/unholy.jpg.png?raw=true', 0.0, 0);
Song breakMySoul = new Song(null, 'Break My Soul', 'Beyoncé', '4:38', 'Pop', false, true, 'https://open.spotify.com/track/2KukL7UlQ8TdvpaA7bY3ZJ?si=28d00316fcab437c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/breakmysoul.jpeg.png?raw=true', 0.0, 0);
Song late = new Song(null, 'Late Night Talking', 'Harry Styles', '2:57', 'Pop', false, true, 'https://open.spotify.com/track/1qEmFfgcLObUfQm0j1W2CK?si=b9920c0c6ad24468', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/lateNightTalking.png?raw=true', 0.0, 0);
Song lavender = new Song(null, 'Lavender Haze', 'Taylor Swift', '3:22', 'Pop', false, true, 'https://open.spotify.com/track/5jQI2r1RdgtuT8S3iG8zFC?si=b23c047e38f54e14', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/artists/taylor-swif.jpg.png?raw=true', 0.0, 0);
Song dynamite = new Song(null, 'Dynamite', 'BTS', '3:19', 'Pop', false, true, 'https://open.spotify.com/track/1hIuSG6xV4RDgD8bDVKP7N?si=d828241883a94b86', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/dynamite.jpg.png?raw=true', 0.0, 0);
Song butter = new Song(null, 'Butter', 'BTS', '2:44', 'Pop', false, true, 'https://open.spotify.com/track/6jjYDGxVJsWS0a5wlVF5vS?si=707e9852b10b4ba3', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-pop/butter.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(dynamite,unroly, breakMySoul, late, lavender,butter));
Song dieHard = new Song(null, 'Die Hard', 'Kendrick Lamar', '3:59', 'Hip-Hop', false, true, 'https://open.spotify.com/track/2g6tReTlM2Akp41g0HaeXN?si=d6cb3d5642ff4236', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/diehard.png?raw=true', 0.0, 0);
Song jimmy = new Song(null, 'Jimmy Cooks', 'Drake, 21 Savage', '3:38', 'Hip-Hop', false, true, 'https://open.spotify.com/track/3F5CgOj3wFlRv51JsHbxhe?si=308b31923d224861', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/jimmy.png?raw=true', 0.0, 0);
Song cooped = new Song(null, 'Cooped Up', 'Post Malone, Roddy Ricch', '3:05', 'Hip-Hop', false, true, 'https://open.spotify.com/track/7DwcBgdzqhFJltEaV1XF81?si=58e6287474444f8b', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/cooppedup.png?raw=true', 0.0, 0);
Song family = new Song(null, 'Family Ties', 'Baby Keem, Kendrick Lamar', '4:12', 'Hip-Hop', false, true, 'https://open.spotify.com/track/7Bpx2vsWfQFBACRz4h3IqH?si=b302e13019334ac9', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/familyties.png?raw=true', 0.0, 0);
Song rich = new Song(null, 'Rich Flex', 'Drake, 21 Savage', '3:59', 'Hip-Hop', false, true, 'https://open.spotify.com/track/1bDbXMyjaUIooNwFE9wn0N?si=5aad3c9693bf4947', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/richflex.png?raw=true', 0.0, 0);
Song island = new Song(null, 'Island of Da Phonk Up', 'psycho7k', '1:49', 'Hip-Hop', false, true, 'https://open.spotify.com/track/2rHlvvsXY72TC8N71XZxkn?si=304e690b02484d6f', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-hip-hop/island.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(island,dieHard, jimmy, cooped, family, rich ));
Song tippa = new Song(null, 'Tippa My Tongue', 'Red Hot Chili Peppers', '4:20', 'Rock', false, true, 'https://open.spotify.com/track/3s53zBEi1ZU6dJj19eFOxW?si=316e19c326004699', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/tippamytoungue.png?raw=true', 0.0, 0);
Song thisIsWay = new Song(null, 'This is Why', 'Paramore', '3:27', 'Rock', false, true, 'https://open.spotify.com/track/7z84Fwf1R3Z2BwHCP620CI?si=460092134e524df7', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thisisway.png?raw=true', 0.0, 0);
Song body = new Song(null, 'Body Paint', 'Arctic Monkeys', '4:50', 'Rock', false, true, 'https://open.spotify.com/track/42GuKw49pPxNAkIhWGwgFs?si=4632d7295b214dfa', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/bodypaint.png?raw=true', 0.0, 0);
Song dying = new Song(null, 'The Dying Song', 'Slipknot', '3:23', 'Rock', false, true, 'https://open.spotify.com/track/6rsoBvxrlxdmqJyGPPciyq?si=9f247f6b390f4d20', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thedyingsong.png?raw=true', 0.0, 0);
Song patient = new Song(null, 'Patient Number 9', 'Ozzy Osbourne, Jeff Beck', '7:21', 'Rock', false, true, 'https://open.spotify.com/track/3YYnFEXCLNbaWuC0hIEnIS?si=01575c29fe6a471c', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/ozzy-patient-number-9.png?raw=true', 0.0, 0);
Song these = new Song(null, 'These Are The Ways', 'Red Hot Chili Peppers', '3:56', 'Rock', false, true, 'https://open.spotify.com/track/1KtXgVTeu3GUXHrOAef6QQ?si=8086e17dbf854aa9', 'https://github.com/uFelps/assets/blob/main/Spotify-Awards/best-rock/thesearetheways.png?raw=true', 0.0, 0);
songRepository.saveAll(Arrays.asList(tippa, thisIsWay, body, dying, patient, these));
